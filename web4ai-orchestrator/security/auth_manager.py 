# security/auth_manager.py - Authentication and Authorization
"""
Security and authentication module for Web4AI Orchestrator
Provides JWT token management, API key validation, and role-based access control
"""

import jwt
import hashlib
import hmac
import time
import secrets
import bcrypt
from typing import Dict, Any, Optional, List, Set
from datetime import datetime, timedelta
from functools import wraps
from flask import request, jsonify, g
import redis
import logging

logger = logging.getLogger(__name__)

class AuthenticationError(Exception):
    """Authentication related errors"""
    pass

class AuthorizationError(Exception):
    """Authorization related errors"""
    pass

class Role:
    """User roles and permissions"""
    
    ADMIN = "admin"
    OPERATOR = "operator"
    NODE = "node"
    CLIENT = "client"
    READONLY = "readonly"
    
    PERMISSIONS = {
        ADMIN: {
            "orchestrator:*",
            "nodes:*", 
            "tasks:*",
            "config:*",
            "metrics:*",
            "users:*"
        },
        OPERATOR: {
            "orchestrator:read",
            "orchestrator:control",
            "nodes:*",
            "tasks:*",
            "config:read",
            "metrics:*"
        },
        NODE: {
            "nodes:register",
            "nodes:heartbeat", 
            "nodes:update",
            "tasks:receive",
            "tasks:update",
            "metrics:read"
        },
        CLIENT: {
            "tasks:submit",
            "tasks:read",
            "nodes:read",
            "metrics:read"
        },
        READONLY: {
            "nodes:read",
            "tasks:read", 
            "metrics:read",
            "config:read"
        }
    }

class TokenManager:
    """JWT token management"""
    
    def __init__(self, secret_key: str, redis_client: Optional[redis.Redis] = None):
        self.secret_key = secret_key
        self.redis_client = redis_client
        self.algorithm = "HS256"
        self.access_token_expires = timedelta(hours=24)
        self.refresh_token_expires = timedelta(days=30)
    
    def generate_token(self, user_id: str, role: str, 
                      token_type: str = "access") -> str:
        """Generate JWT token"""
        now = datetime.utcnow()
        expires = now + (self.refresh_token_expires if token_type == "refresh" 
                        else self.access_token_expires)
        
        payload = {
            "user_id": user_id,
            "role": role,
            "token_type": token_type,
            "iat": now,
            "exp": expires,
            "jti": secrets.token_urlsafe(16)  # Token ID for blacklisting
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
        
        # Store token metadata in Redis if available
        if self.redis_client:
            token_key = f"token:{payload['jti']}"
            token_data = {
                "user_id": user_id,
                "role": role,
                "token_type": token_type,
                "created_at": now.isoformat()
            }
            self.redis_client.setex(
                token_key, 
                int(expires.timestamp() - now.timestamp()),
                str(token_data)
            )
        
        return token
    
    def verify_token(self, token: str) -> Dict[str, Any]:
        """Verify and decode JWT token"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])
            
            # Check if token is blacklisted
            if self.redis_client:
                token_key = f"token:{payload['jti']}"
                blacklist_key = f"blacklist:{payload['jti']}"
                
                if (not self.redis_client.exists(token_key) or 
                    self.redis_client.exists(blacklist_key)):
                    raise AuthenticationError("Token is invalid or blacklisted")
            
            return payload
            
        except jwt.ExpiredSignatureError:
            raise AuthenticationError("Token has expired")
        except jwt.InvalidTokenError:
            raise AuthenticationError("Invalid token")
    
    def blacklist_token(self, token: str) -> bool:
        """Blacklist a token"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])
            
            if self.redis_client:
                blacklist_key = f"blacklist:{payload['jti']}"
                expires_at = payload['exp']
                ttl = max(1, int(expires_at - time.time()))
                
                self.redis_client.setex(blacklist_key, ttl, "blacklisted")
                return True
                
        except jwt.InvalidTokenError:
            pass
        
        return False
    
    def refresh_token(self, refresh_token: str) -> Dict[str, str]:
        """Generate new access token from refresh token"""
        payload = self.verify_token(refresh_token)
        
        if payload.get('token_type') != 'refresh':
            raise AuthenticationError("Invalid refresh token")
        
        # Generate new access token
        access_token = self.generate_token(
            payload['user_id'], 
            payload['role'], 
            "access"
        )
        
        return {"access_token": access_token}

class APIKeyManager:
    """API key management"""
    
    def __init__(self, redis_client: Optional[redis.Redis] = None):
        self.redis_client = redis_client
        self.api_keys: Dict[str, Dict[str, Any]] = {}
    
    def generate_api_key(self, user_id: str, role: str, 
                        name: str = "", expires_days: Optional[int] = None) -> str:
        """Generate new API key"""
        api_key = f"web4ai_{secrets.token_urlsafe(32)}"
        
        key_data = {
            "user_id": user_id,
            "role": role,
            "name": name,
            "created_at": datetime.utcnow().isoformat(),
            "expires_at": None,
            "last_used": None,
            "usage_count": 0
        }
        
        if expires_days:
            expires_at = datetime.utcnow() + timedelta(days=expires_days)
            key_data["expires_at"] = expires_at.isoformat()
        
        # Store API key
        if self.redis_client:
            self.redis_client.hset(
                f"api_key:{api_key}", 
                mapping=key_data
            )
            if expires_days:
                self.redis_client.expire(
                    f"api_key:{api_key}", 
                    expires_days * 24 * 3600
                )
        else:
            self.api_keys[api_key] = key_data
        
        logger.info(f"Generated API key for user {user_id} with role {role}")
        return api_key
    
    def validate_api_key(self, api_key: str) -> Dict[str, Any]:
        """Validate API key and return user data"""
        if not api_key.startswith("web4ai_"):
            raise AuthenticationError("Invalid API key format")
        
        # Get key data
        if self.redis_client:
            key_data = self.redis_client.hgetall(f"api_key:{api_key}")
            if not key_data:
                raise AuthenticationError("Invalid API key")
            
            # Convert bytes to strings (Redis returns bytes)
            key_data = {k.decode() if isinstance(k, bytes) else k: 
                       v.decode() if isinstance(v, bytes) else v 
                       for k, v in key_data.items()}
        else:
            key_data = self.api_keys.get(api_key)
            if not key_data:
                raise AuthenticationError("Invalid API key")
        
        # Check expiration
        if key_data.get("expires_at"):
            expires_at = datetime.fromisoformat(key_data["expires_at"])
            if datetime.utcnow() > expires_at:
                raise AuthenticationError("API key has expired")
        
        # Update usage statistics
        self._update_key_usage(api_key, key_data)
        
        return key_data
    
    def _update_key_usage(self, api_key: str, key_data: Dict[str, Any]):
        """Update API key usage statistics"""
        now = datetime.utcnow().isoformat()
        usage_count = int(key_data.get("usage_count", 0)) + 1
        
        if self.redis_client:
            self.redis_client.hset(f"api_key:{api_key}", mapping={
                "last_used": now,
                "usage_count": usage_count
            })
        else:
            key_data["last_used"] = now
            key_data["usage_count"] = usage_count
    
    def revoke_api_key(self, api_key: str) -> bool:
        """Revoke an API key"""
        if self.redis_client:
            result = self.redis_client.delete(f"api_key:{api_key}")
            return result > 0
        else:
            if api_key in self.api_keys:
                del self.api_keys[api_key]
                return True
        return False
    
    def list_api_keys(self, user_id: str) -> List[Dict[str, Any]]:
        """List API keys for a user"""
        keys = []
        
        if self.redis_client:
            # Scan for user's API keys
            for key in self.redis_client.scan_iter(match="api_key:*"):
                key_data = self.redis_client.hgetall(key)
                if key_data.get(b"user_id", b"").decode() == user_id:
                    api_key = key.decode().replace("api_key:", "")
                    keys.append({
                        "api_key": api_key[:20] + "...",  # Truncated for security
                        "name": key_data.get(b"name", b"").decode(),
                        "role": key_data.get(b"role", b"").decode(),
                        "created_at": key_data.get(b"created_at", b"").decode(),
                        "last_used": key_data.get(b"last_used", b"").decode(),
                        "usage_count": int(key_data.get(b"usage_count", 0))
                    })
        else:
            for api_key, key_data in self.api_keys.items():
                if key_data["user_id"] == user_id:
                    keys.append({
                        "api_key": api_key[:20] + "...",
                        "name": key_data["name"],
                        "role": key_data["role"],
                        "created_at": key_data["created_at"],
                        "last_used": key_data["last_used"],
                        "usage_count": key_data["usage_count"]
                    })
        
        return keys

class RateLimiter:
    """Rate limiting for API requests"""
    
    def __init__(self, redis_client: Optional[redis.Redis] = None):
        self.redis_client = redis_client
        self.limits: Dict[str, Dict[str, int]] = {}
    
    def check_rate_limit(self, identifier: str, 
                        limit_per_minute: int = 100,
                        limit_per_hour: int = 1000) -> bool:
        """Check if request is within rate limits"""
        current_time = int(time.time())
        minute_key = f"rate_limit:{identifier}:{current_time // 60}"
        hour_key = f"rate_limit:{identifier}:{current_time // 3600}:hour"
        
        if self.redis_client:
            # Check minute limit
            minute_count = self.redis_client.incr(minute_key)
            if minute_count == 1:
                self.redis_client.expire(minute_key, 60)
            
            if minute_count > limit_per_minute:
                return False
            
            # Check hour limit
            hour_count = self.redis_client.incr(hour_key)
            if hour_count == 1:
                self.redis_client.expire(hour_key, 3600)
            
            if hour_count > limit_per_hour:
                return False
        else:
            # In-memory rate limiting (less accurate)
            if identifier not in self.limits:
                self.limits[identifier] = {"minute": 0, "hour": 0, "reset_time": current_time}
            
            user_limits = self.limits[identifier]
            
            # Reset counters if needed
            if current_time - user_limits["reset_time"] >= 60:
                user_limits["minute"] = 0
                if current_time - user_limits["reset_time"] >= 3600:
                    user_limits["hour"] = 0
                user_limits["reset_time"] = current_time
            
            user_limits["minute"] += 1
            user_limits["hour"] += 1
            
            if (user_limits["minute"] > limit_per_minute or 
                user_limits["hour"] > limit_per_hour):
                return False
        
        return True

class SecurityManager:
    """Main security manager"""
    
    def __init__(self, config: Dict[str, Any], redis_client: Optional[redis.Redis] = None):
        self.config = config
        self.redis_client = redis_client
        
        secret_key = config.get("security", {}).get("secret_key", secrets.token_urlsafe(32))
        
        self.token_manager = TokenManager(secret_key, redis_client)
        self.api_key_manager = APIKeyManager(redis_client)
        self.rate_limiter = RateLimiter(redis_client)
        
        # Initialize default API keys if configured
        self._initialize_default_keys()
    
    def _initialize_default_keys(self):
        """Initialize default API keys from configuration"""
        default_keys = self.config.get("security", {}).get("api_keys", [])
        
        for key_config in default_keys:
            if isinstance(key_config, str):
                # Simple string API key
                self.api_key_manager.api_keys[key_config] = {
                    "user_id": "system",
                    "role": Role.ADMIN,
                    "name": "Default Admin Key",
                    "created_at": datetime.utcnow().isoformat(),
                    "expires_at": None,
                    "last_used": None,
                    "usage_count": 0
                }
            elif isinstance(key_config, dict):
                # Detailed API key configuration
                api_key = key_config.get("key")
                if api_key:
                    self.api_key_manager.api_keys[api_key] = {
                        "user_id": key_config.get("user_id", "system"),
                        "role": key_config.get("role", Role.CLIENT),
                        "name": key_config.get("name", "Configured Key"),
                        "created_at": datetime.utcnow().isoformat(),
                        "expires_at": None,
                        "last_used": None,
                        "usage_count": 0
                    }
    
    def authenticate_request(self, auth_header: Optional[str]) -> Dict[str, Any]:
        """Authenticate incoming request"""
        if not auth_header:
            raise AuthenticationError("Missing authentication header")
        
        auth_parts = auth_header.split(" ")
        if len(auth_parts) != 2:
            raise AuthenticationError("Invalid authentication header format")
        
        auth_type, credential = auth_parts
        
        if auth_type.lower() == "bearer":
            # JWT token authentication
            return self.token_manager.verify_token(credential)
        elif auth_type.lower() == "apikey":
            # API key authentication
            key_data = self.api_key_manager.validate_api_key(credential)
            return {
                "user_id": key_data["user_id"],
                "role": key_data["role"],
                "auth_type": "api_key"
            }
        else:
            raise AuthenticationError("Unsupported authentication type")
    
    def authorize_request(self, user_data: Dict[str, Any], 
                         required_permission: str) -> bool:
        """Check if user has required permission"""
        user_role = user_data.get("role")
        if not user_role:
            return False
        
        permissions = Role.PERMISSIONS.get(user_role, set())
        
        # Check exact permission or wildcard
        if required_permission in permissions:
            return True
        
        # Check wildcard permissions
        resource, action = required_permission.split(":", 1)
        wildcard_permission = f"{resource}:*"
        if wildcard_permission in permissions:
            return True
        
        return False
    
    def check_rate_limit(self, identifier: str) -> bool:
        """Check rate limits for identifier"""
        security_config = self.config.get("security", {})
        
        if not security_config.get("rate_limiting", False):
            return True
        
        limit_per_minute = security_config.get("max_requests_per_minute", 100)
        limit_per_hour = security_config.get("max_requests_per_hour", 1000)
        
        return self.rate_limiter.check_rate_limit(
            identifier, limit_per_minute, limit_per_hour
        )

# Flask decorators for authentication and authorization
def require_auth(security_manager: SecurityManager):
    """Decorator to require authentication"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            try:
                auth_header = request.headers.get("Authorization")
                user_data = security_manager.authenticate_request(auth_header)
                g.current_user = user_data
                
                # Rate limiting
                identifier = user_data.get("user_id", request.remote_addr)
                if not security_manager.check_rate_limit(identifier):
                    return jsonify({
                        "success": False,
                        "error": "Rate limit exceeded"
                    }), 429
                
                return f(*args, **kwargs)
                
            except AuthenticationError as e:
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 401
            except Exception as e:
                logger.error(f"Authentication error: {e}")
                return jsonify({
                    "success": False,
                    "error": "Authentication failed"
                }), 401
        
        return decorated_function
    return decorator

def require_permission(security_manager: SecurityManager, permission: str):
    """Decorator to require specific permission"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            try:
                if not hasattr(g, 'current_user'):
                    return jsonify({
                        "success": False,
                        "error": "Authentication required"
                    }), 401
                
                if not security_manager.authorize_request(g.current_user, permission):
                    return jsonify({
                        "success": False,
                        "error": "Insufficient permissions"
                    }), 403
                
                return f(*args, **kwargs)
                
            except AuthorizationError as e:
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 403
        
        return decorated_function
    return decorator

# Example usage in orchestrator API
def setup_security_routes(app, security_manager: SecurityManager):
    """Setup security-related routes"""
    
    @app.route('/api/v1/auth/login', methods=['POST'])
    def login():
        """User login endpoint"""
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')
        
        # Validate credentials (implement your user store)
        user_data = authenticate_user(username, password)
        if not user_data:
            return jsonify({
                "success": False,
                "error": "Invalid credentials"
            }), 401
        
        # Generate tokens
        access_token = security_manager.token_manager.generate_token(
            user_data['user_id'], user_data['role'], "access"
        )
        refresh_token = security_manager.token_manager.generate_token(
            user_data['user_id'], user_data['role'], "refresh"
        )
        
        return jsonify({
            "success": True,
            "access_token": access_token,
            "refresh_token": refresh_token,
            "expires_in": 24 * 3600  # 24 hours
        })
    
    @app.route('/api/v1/auth/refresh', methods=['POST'])
    def refresh():
        """Refresh access token"""
        data = request.get_json()
        refresh_token = data.get('refresh_token')
        
        try:
            tokens = security_manager.token_manager.refresh_token(refresh_token)
            return jsonify({
                "success": True,
                **tokens
            })
        except AuthenticationError as e:
            return jsonify({
                "success": False,
                "error": str(e)
            }), 401
    
    @app.route('/api/v1/auth/logout', methods=['POST'])
    @require_auth(security_manager)
    def logout():
        """User logout - blacklist token"""
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header.split(" ")[1]
            security_manager.token_manager.blacklist_token(token)
        
        return jsonify({
            "success": True,
            "message": "Logged out successfully"
        })
    
    @app.route('/api/v1/auth/api-keys', methods=['GET'])
    @require_auth(security_manager)
    @require_permission(security_manager, "users:read")
    def list_api_keys():
        """List user's API keys"""
        user_id = g.current_user['user_id']
        keys = security_manager.api_key_manager.list_api_keys(user_id)
        
        return jsonify({
            "success": True,
            "api_keys": keys
        })
    
    @app.route('/api/v1/auth/api-keys', methods=['POST'])
    @require_auth(security_manager)
    @require_permission(security_manager, "users:write")
    def create_api_key():
        """Create new API key"""
        data = request.get_json()
        user_id = g.current_user['user_id']
        role = data.get('role', Role.CLIENT)
        name = data.get('name', '')
        expires_days = data.get('expires_days')
        
        api_key = security_manager.api_key_manager.generate_api_key(
            user_id, role, name, expires_days
        )
        
        return jsonify({
            "success": True,
            "api_key": api_key,
            "message": "API key created successfully"
        })

def authenticate_user(username: str, password: str) -> Optional[Dict[str, Any]]:
    """Authenticate user credentials - implement your user store"""
    # This is a placeholder - implement your actual user authentication
    # Could use database, LDAP, OAuth, etc.
    
    # Example static users for testing
    test_users = {
        "admin": {
            "password_hash": bcrypt.hashpw(b"admin123", bcrypt.gensalt()),
            "user_id": "admin_user",
            "role": Role.ADMIN
        },
        "operator": {
            "password_hash": bcrypt.hashpw(b"operator123", bcrypt.gensalt()),
            "user_id": "operator_user", 
            "role": Role.OPERATOR
        }
    }
    
    user = test_users.get(username)
    if user and bcrypt.checkpw(password.encode(), user["password_hash"]):
        return {
            "user_id": user["user_id"],
            "role": user["role"],
            "username": username
        }
    
    return None